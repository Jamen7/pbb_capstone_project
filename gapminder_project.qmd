---
title: "Analyzing Global Trends in Child Mortality, Fertility, and Employment"
format: html
author: "James Matosse"
---

# Introduction

## Datasets

Three datasets were downloaded from the Gapminder: Child Mortality, Women's Fertility, and Female Employment Rate.
The Child Mortality dataset measures the number of deaths of children under five years old per 1,000 live births.
Total fertility rate is the number of children that would be born to a woman if she were to live to the end of her childbearing years and bear children in accordance with age-specific fertility rates of the specified year.
Female employment rate the percentage of female population, age group 15+, that has been employed during the given year.

### Imports

```{python}
import pandas as pd
import plotly.express as px
import numpy as np
from itables import show
import country_converter as coco

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore")
```

Reading all three datasets from the data folder into a pandas dataframes.

```{python}
child_mortality = pd.read_csv("data/child_mortality_0_5_year_olds_dying_per_1000_born.csv")
fertility_wide = pd.read_csv("data/children_per_woman_total_fertility.csv")
employ_wide = pd.read_csv("data/females_aged_15plus_employment_rate_percent.csv")
```


## Data cleaning

The datasets are all in a wide format, for further data analysis it will be converted to a long format with only three columns each; "country", "year" and "value_name".

```{python}
# Use pd.melt()
child_mortality_long = child_mortality.melt(
    id_vars="country", var_name="year", value_name="mortality"
)
fertility_long = fertility_wide.melt(
    id_vars="country", var_name="year", value_name="woman_fertility"
)
employ_long = employ_wide.melt(
    id_vars="country", var_name="year", value_name="employment_rate"
)

def melt_data(df, value_name):
    return df.melt(id_vars="country", var_name="year", value_name=value_name)

child_mortality_long = melt_data(child_mortality, "mortality")
fertility_long = melt_data(fertility_wide, "woman_fertility")
employ_long = melt_data(employ_wide, "employment_rate")
```

The `child_mortality_long` and `fertility_long` datasets have observations from the year 1800 to current and projections to year 2100. The analysis will focus on 1991 to 2019 corresponding with the `employ_long` dataset. The coco library will have difficulty converting the country UAE to a country code according to ISO3, likewise the Channel Islands country will not be recognised. Therefore, these country names will be replaced by their alternatives.

```{python}
# Replace "UAE" with "United Arab Emirates"
child_mortality_long["country"] = child_mortality_long["country"].replace(
    {"UAE": "United Arab Emirates"}
)
fertility_long["country"] = fertility_long["country"].replace(
    {"UAE": "United Arab Emirates"}
)
employ_long["country"] = employ_long["country"].replace({"UAE": "United Arab Emirates"})
# Replace "Channel Islands" with "United Kingdom"
employ_long["country"] = employ_long["country"].replace(
    "Channel Islands", "United Kingdom"
)

#Combining string replacements for efficiency:
replacements = {"UAE": "United Arab Emirates", "Channel Islands": "United Kingdom"}
for df in [child_mortality_long, fertility_long, employ_long]:
    df["country"] = df["country"].replace(replacements)

# Merge child_mortality_long with fertility_long on both country and year applying a left join
child_fertility = pd.merge(
    child_mortality_long,
    fertility_long,
    on=["country", "year"],
    how="left",
)
# Before quering the year variable, set the "year" to an integer
child_fertility["year"] = child_fertility["year"].astype(int)

# Subset the recently merged data to between 1991 and 2019
child_fertility_sub = child_fertility.query("year >= 1991 and year <= 2019")

# set the "year" to an integer
employ_long["year"] = employ_long["year"].astype(int)

# Consolidate year conversion:
for df in [child_mortality_long, fertility_long, employ_long]:
    df["year"] = df["year"].astype(int)

# Merge datasets on 'country' and 'year'
child_fertility = pd.merge(
    child_mortality_long, fertility_long, on=["country", "year"], how="left"
)

# Filter data to include only years 1991 to 2019
child_fertility_sub = child_fertility.query("1991 <= year <= 2019")

```

To include the `employ_long` to the `child_fertility_sub`, both datasets need a uniform country code to ensure consistency. The country code will also be used as the locations for the choropleth plot for the world's map.

```{python}
# Convert 'country' to a 'country code' and add it as a new variable
child_fertility_sub["country_code"] = coco.convert(
    child_fertility_sub["country"], to="ISO3"
)
employ_long["country_code"] = coco.convert(employ_long["country"], to="ISO3")
```

```{python}
employ_child_fert = pd.merge(
    child_fertility_sub,
    employ_long,
    on=["country_code", "year"],
    how="left",
)
employ_child_fert = employ_child_fert.drop(columns="country_y").rename(
    columns={"country_x": "country"}
)
```

```{python}
# Creates continent variable to the assigned country
employ_child_fert["continent"] = employ_child_fert["country"].apply(
    lambda x: coco.convert(names=x, to="continent")
)
```

Re-ordering of the columns' variables

```{python}
col_list = list(employ_child_fert.columns)

col_list.insert(
    1, col_list.pop(4)
)  # Pop the 5th column (index 4) and insert at the 2nd
# col_list
col_list.insert(
    2, col_list.pop(6)
)  # Pop the 7th column (index 6) and insert at the 3rd
employ_child_fert = employ_child_fert[col_list]

employ_child_fert = employ_child_fert.dropna()  # Remove rows with NaN values especially from the employment_rate variable
employ_child_fert
```

# Data Manipulation and Visualization

## Child Mortality

First we calculate the relative change for Child Mortality between 1999 and 2019

```{python}
# Subset the data to include `country`, `1999`, and `2019` columns only.
table_df = child_mortality[['country', '1999', '2019']]
table_df = table_df.rename(columns={'country': 'Country/area'})

# Calculate absolute change as the difference between 2019 and 1999
table_df["Absolute Change"] = table_df['2019'] - table_df['1999']

# Calculate relative change as the absolute change divided by the 2019 child mortality, then multiplied by 100
table_df["Relative Change"] = ((table_df['2019'] - table_df['1999']) / table_df['1999']) * 100

# Round to 0 decimal places, and add a % sign to the relative change
table_df["Relative Change"] = table_df["Relative Change"].round(0).astype(str) + "%"

table_df
```

Almost all countries had reduced the child mortality within the two decades except for Seychelles, Dominica and Brunei which saw an increase on the child mortality.

Plotting selected countries' child mortality over the two decades for each continent.

```{python}
# Define a color mapping for consistency
continent_color = {
    "Asia": "red",
    "Africa": "blue",
    "Oceania": "green",
    "America": "orange",
    "Europe": "purple",
}

color_map = {
    "China": "red",
    "Egypt": "blue",
    "Australia": "green",
    "Argentina": "orange",
    "Germany": "purple",
}

# Convert mortality to a percentage
employ_child_fert["mortality_pct"] = employ_child_fert["mortality"] / 10

px.line(
    employ_child_fert.query('country == ["China", "Egypt", "Australia", "Argentina", "Germany"]'),
    x="year",
    y="mortality",
    color="country",
    color_discrete_map=color_map,
    title="The Child Mortality from 1991 to 2019",
)
```

The time series show that Egypt has the highest child mortality that was 81.5 in 1991 and drop to 20.5 in 2019 while Australia and Germany are the lowest, below tens, throughout the duration.

Using the continent variable, a summary table for the highest or lowest numerical variable per continent can be found.

```{python}
lowest_mortality = employ_child_fert.loc[
    employ_child_fert.groupby("continent")["mortality"].idxmin()
].sort_values(["mortality"], ascending=True)

fig = px.bar(
    lowest_mortality,
    x="continent",
    y="mortality",
    color="country",
    title="Lowest Child Mortality per Continent in 2019",
    labels={
        "mortality": "Child Mortality",
        "continent": "Continent",
        "country": "Country",
    },
    text_auto="0.1f",
)
fig
```

The chart highlights clear disparities between continents in child mortality rates, with developed regions (Europe, Asia, Oceania) showing significantly lower rates compared to developing regions (America and Africa).

This data underscores the importance of healthcare infrastructure, economic development, and public health initiatives in reducing child mortality rates. Finland having the lowest child mortality rate among all continents, with a value close to 1. This suggests excellent healthcare systems and child welfare practices in the country. In contrast, Libya has the highest child mortality rate among the listed continents, with a value significantly higher than the rest. This reflects disparities in healthcare access, infrastructure, and socioeconomic conditions in the African region.

```{python}
# Create the map using plotly express with a red color scale
map_fig = px.choropleth(
    employ_child_fert,
    locations="country_code",
    color="mortality",
    hover_name="country",
    animation_frame="year",
    title="Map of Countries by Child Mortality",
    color_continuous_scale="Reds",
    labels={
        "country_code": "Country Code",
        "mortality": "Child Mortality",
        "year": "Year",
    },
).update_layout(coloraxis_showscale=True)
map_fig
```

## Woman's Fertility

**Babies per woman, total fertility** this is the number of children that would be born to a woman if she were to live to the end of her childbearing years and bear children in accordance with age-specific fertility rates of the specified year. 

Plotting the woman's fertility for similar countries as before, the child mortality was used as the size of the bubbles

```{python}
fig_fert = px.line(
    employ_child_fert.query('country == ["China", "Egypt", "Australia", "Argentina", "Germany"]'),
    x="year",
    y="woman_fertility",
    color="country",
    title="The Woman's Fertility from 1991 to 2019",
    markers=True,
    color_discrete_map=color_map,
    labels={
        "country": "Country",
        "woman_fertility": "Woman's Fertility",
        "year": "Year",
    },
).update_layout(
    showlegend=True, xaxis_title="Year", yaxis_title="Total Fertility Rate"
)
fig_fert
```

The women's fertility for China, Germany and Australia are below 2 for the whole range except for Australia in 2008 which  was an unusual and significant demographic occurrence according to ChatGTP. Argentina's fertility has been  dropping from 3.01 in 1991 and in 2019 it crossed the 2.0 mark to 1.88 which means the population growth will decrease.

Performing an average aggregate for each continent and plotting the results.

```{python}
avg_fert_cont = (
    employ_child_fert.groupby("continent")
    .agg(mean_fertility=("woman_fertility", "mean"))
    .reset_index()
    .sort_values(by="mean_fertility", ascending=False)
)
avg_fert_cont
```

```{python}
fig_fert1 = px.pie(
    avg_fert_cont,
    names="continent",
    values="mean_fertility",
    color="continent",
    title="Average Woman's Fertility per Continent",
    labels={"mean_fertility": "Average Fertility", "continent": "Continent"},
    hover_data=["mean_fertility"],
    color_discrete_map=continent_color,
).update_traces(
    textinfo="label+percent", showlegend=False  # Show label and percent
)
fig_fert1
```

There is a clear divide between continents with higher fertility rates (Africa and Oceania) and those with lower rates (Europe, America, and parts of Asia). The data reflects varying levels of development, healthcare access, education, and cultural norms influencing fertility rates worldwide.

To further analyse the lowest fertility continents, the data can be queried to the year 2019 and sort values for the top 20 lowest countries, then color code with the continent. 

```{python}
lowest20 = (
    employ_child_fert[employ_child_fert["year"] == 2019]
    .sort_values("woman_fertility", ascending=True)
    .head(20)
)

# Create the bar plot
fig_fert2 = px.bar(
    lowest20,
    y='country',
    x='woman_fertility',
    color='continent',  # Use continent for coloring
    hover_name='continent',
    title='Lowest Total Fertility Rate in 2019',
    labels={'continent': 'Continent', 'woman_fertility': "Woman's Fertility", 'country': 'Country'},
    color_discrete_map=continent_color  # Apply the predefined color mapping
).update_layout(
    showlegend=False,
    xaxis_title="Total Fertility Rate",
    yaxis_title="Country"
    )

fig_fert2
```

One African country in the top 20 is Mauritius at 1.35 fertility rate and two American countries that have slightly higher rate than Mauritius are Jamaica and the Bahamas. The rest of the top 20 are between Europe and Asia, and the lowest being South Korea at 0.88 fertility rate.


## Female Employment Rate

Percentage of female population, age group 15+, that has been employed during the given year.

```{python}
px.line(employ_child_fert
    .query(
        'country == ["China", "Egypt", "Australia", "Argentina", "Germany"]'), 
    x= 'year', 
    y='employment_rate', 
    markers=True,
    color='country',
    color_discrete_map=color_map, 
    title= 'The Female Employment Rate from 1991 to 2019'
    )
```

China's employment rate for women has been decreasing from 71.6% from 1991 steadily to 2000 then followed by few steep declines that led to 58.2% in 2019, while Australia and Germany' rates have been increasing with few dips from 47.3% to 57.7% and 44.8% to 54.1%, respectively. Egypt has the lowest employment rate ranging between 14.3 to 18.6 for the duration.

The world's map for female employment rate is created below with a green color scale and can be interacted with through the year slider to see the progress in each region or country.

```{python}
map_fig2 = px.choropleth(
    employ_child_fert,
    locations="country_code",
    color="employment_rate",
    hover_name="country",
    animation_frame="year",
    title="Map of Countries for Female Employment Rate",
    labels={
        "country_code": "Country Code",
        "employment_rate": "Employment Rate",
        "year": "Year",
    },
    color_continuous_scale="Greens",
).update_layout(coloraxis_showscale=True)
map_fig2
```

Egypt and China showed some significant decline in 2018 for total fertility rate, to probe further, 2018 was selected to be the default for the violin plot depicting the distribution for the female employment rate per continent. Although, the viewer can interact with the plot to see the other years' distributions.

```{python}
continent_fig = px.violin(
    employ_child_fert,
    x="continent",
    y="employment_rate",
    color="continent",
    animation_frame="year",  # Add animation for the year
    labels={'continent': 'Continent', 'employment_rate': 'Employment Rate', 'year': 'Year', 'country': 'Country'},
    title="Distribution of Female Employment Rate by Continent (1991-2019)",
    points="all",  # This shows all data points
    hover_data=["country"],  # This adds country names to hover info
    color_discrete_map=continent_color,
    box=True,
).update_layout(
    showlegend=False,
    xaxis_title="Continent",
    yaxis_title="Employment Rate",
    sliders=[
        {
            "active": employ_child_fert["year"]
            .unique()
            .tolist()
            .index(2018),  # Set slider to 2018 index
        }
    ],
)

# Ensure the animation starts at 2018 by setting the default frame
continent_fig.frames = [
    frame for frame in continent_fig.frames if frame.name == "2018"
] + [
    frame for frame in continent_fig.frames if frame.name != "2018"
]

continent_fig
```

**For 2018** Africa and Oceania have relatively high upper bounds for female employment rates compared to other continents. In contrast, Asia has the lowest minimum values, indicating that some countries have significantly low participation rates.

Africa exhibits the widest range of female employment rates, reflecting significant variability between countries on this continent. However, it also has the highest median, suggesting that most countries in Africa have a relatively high rate of female employment compared to other continents.

Asia also shows a broad range, with some countries having very low employment rates and others quite high. On the other hand, Europe, America, and Oceania demonstrate relatively smaller ranges, indicating more consistency within these continents. Furthermore, Europe and America have lower medians compared to Africa and Oceania, reflecting a slightly lower overall female employment rate.

## Home page

Contains the lowest child mortality value box with the corresponding country and year. Two more value boxes with the highest total fertility rate value and the highest female employment rate value in the entire dataset.

```{python}
# Compute highest female employment rate
highestE_row = (
    employ_child_fert.sort_values("employment_rate", ascending=False).head(1).squeeze()
)
highest_employ_rat_country = highestE_row["country"]
highest_employ_rat_value = round(highestE_row["employment_rate"], 2)
highest_employ_rat_year = highestE_row["year"]
print(f"Highest Female Employment Rate is {highest_employ_rat_value}% from {highest_employ_rat_country} in {highest_employ_rat_year}")

# Compute lowest child mortality
lowest_row = (
    employ_child_fert.sort_values("mortality", ascending=True).head(1).squeeze()
)
lowest_mortality_country = lowest_row["country"]
lowest_mortality_value = round(lowest_row["mortality"], 1)
lowest_mortality_year = lowest_row["year"]
print(f"Lowest Child Mortality is {lowest_mortality_value} from {lowest_mortality_country} in {lowest_mortality_year}")

# Compute highest total fertility rate
highestF_row = (
    employ_child_fert.sort_values("woman_fertility", ascending=False).head(1).squeeze()
)
highest_fertility_country = highestF_row["country"]
highest_fertility_value = round(highestF_row["woman_fertility"], 2)
highest_fertility_year = highestF_row["year"]
print(f"Highest Total Fertility Rate is {highest_fertility_value} from {highest_fertility_country} in {highest_fertility_year}")
``` 

This page show an overview of the analysis, then the other pages have details on the analysis including some interpretations. Define a function that takes employment_rate as an input and assign it to a category of four groups.

```{python}
def assign_employ_group(employ_rate):
    if employ_rate >= 3 and employ_rate < 36:
        return "3-35"
    elif employ_rate >= 36 and employ_rate < 47:
        return "36-46"
    elif employ_rate >= 47 and employ_rate < 58:
        return "47-58"
    elif employ_rate >= 58:
        return "58-90"
    else:
        return "Invalid"


# assign_employ_group(20)
assign_employ_groupVec = np.vectorize(assign_employ_group)

employ_child_fert["employ_group"] = assign_employ_groupVec(
    employ_child_fert["employment_rate"]
)

# Create summary table for employ groups
employ_mortality_table = (
    employ_child_fert.groupby("employ_group")
    .agg(
        mean_mortality_employ=("mortality_pct", "mean"),
        num_inds=("mortality_pct", "size"),
    )
    .reset_index()
)


fig_mix = px.bar(
    employ_mortality_table,
    x="employ_group",
    y="mean_mortality_employ",
    title="Average Child Mortality per Grouped Employment Rate",
    labels={
        "mean_mortality_employ": "Child Mortality",
        "employ_group": "Employment Rate Group",
    },
    #    color_discrete_map=continent_color,
).update_layout(
    showlegend=False,
    xaxis_title="Female Employment Rate Group (%)",
    yaxis_title="Child Mortality (%)",
)
fig_mix
```

Most of the countries with the female employment rate of 58% to 90% have the highest average of child mortality, followed by the lowest employment group. This might be due to most developing countries in Africa and some in Asia.
The relationship between these three indicators can be displayed with a scatter plot, setting employment_rate as the size of the bubbles and the forth variable "year" as the animation frame.

```{python}
fig_mix1 = px.scatter(
    employ_child_fert,
    y="mortality_pct",
    x="woman_fertility",
    animation_frame="year",
    color="continent",
    title="Child Mortality vs. Woman's fertility",
    size="employment_rate",
    hover_name="country",
    color_discrete_map=continent_color,
    labels={
        "country": "Country",
        "woman_fertility": "Woman's Fertility",
        "year": "Year",
        "mortality_pct": "Child Mortality",
        "continent": "Continent",
        "employment_rate": "Employment Rate",
    },
).update_layout(
    showlegend=False,
    xaxis_title="Total Fertility Rate",
    yaxis_title="Child Mortality (%)",
)
fig_mix1
```

Most African countries had high child mortality and woman's fertility in 1991 with few Asian countries. In 2019, child mortality has reduced by half from about 30% in 1991 yet the number of babies per woman are still above 3 for most African countries.

## Data Download

```{python}
# | title: Child mortality, total fertility and female employment rate dataset (1991 to 2019)

employ_child_fert = employ_child_fert.rename(
    columns={
        "country": "Country/area",
        "country_code": "Country Code",
        "continent": "Continent",
        "year": "Year",
        "mortality": "Child Mortality",
        "woman_fertility": "Fertility Rate",
        "employment_rate": "Employment Rate",
    }
)
employ_child_fert = employ_child_fert.drop(columns=['mortality_pct', 'employ_group'])
# Display full dataset with itables
show(
    employ_child_fert,
    buttons=["csvHtml5"],
)
```

## About

The data used for this PBB's capstone project was obtained from [Gapminder's data repository](https://gapminder.org/data). Three indicators were selected for analysis namely; "child mortality", "total fertilty rate", and "female employment rate".

Child mortality is for 0 to 5 year olds dying per 1000 born.
Total fertility rate is the number of children that would be born to a woman if she were to live to the end of her childbearing years and bear children in accordance with age-specific fertility rates of the specified year.
Female employment rate is the percentage of female population, age group 15+, that has been employed during the given year.

Gapminder is an independent Swedish foundation with no political, religious or economic affiliations. Gapminder fights devastating misconceptions and promotes a fact-based worldview everyone can understand.

**Watch Hans Rosling on Child Mortality in Developing Countries:**

<iframe width="560" height="315" src="https://youtube.com/embed/OwII-dwh-bk?si=iVzuHDVHmiGmM_6b" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



```{python}

# This code causes issues with unintended rendering of the figure to the dashborad, switch to plotly.express

# Filter the data
# filtered_data = employ_child_fert.query(
#     'country == ["China", "Egypt", "Australia", "Argentina", "Germany"]'
# )

# Create the figure
# fig2 = go.Figure()
# # include: False

# # Add scatter plot for 'employment_rate' vs. 'year' (y-axis 1)
# for country in filtered_data["country"].unique():
#     country_data = filtered_data[filtered_data["country"] == country]
#     fig2.add_trace(
#         go.Scatter(
#             x=country_data["year"],
#             y=country_data["employment_rate"],
#             mode="markers",
#             name=f"{country} (Employment)",
#             legendgroup=country,
#             showlegend=False,
#             marker=dict(color=color_map[country]),  # Assign color
#         )
#     )

# ##include: False
# # Add a secondary y-axis for 'woman_fertility' (y-axis 2)
# for country in filtered_data["country"].unique():
#     country_data = filtered_data[filtered_data["country"] == country]
#     fig2.add_trace(
#         go.Scatter(
#             x=country_data["year"],
#             y=country_data["woman_fertility"],
#             mode="lines",
#             name=f"{country} (Woman's Fertility)",
#             yaxis="y2",
#             showlegend=False,  # Avoid duplicate legends
#             line=dict(color=color_map[country]),  # Assign matching color
#         )
#     )

# # include: False
# # Update layout to include a second y-axis
# fig2.update_layout(
#     title="The Woman's Fertility and Employment Rate from 1991 to 2019",
#     xaxis=dict(title="Year"),
#     yaxis=dict(title="Female Employment Rate", side="left"),
#     yaxis2=dict(
#         title="Total Fertility Rate", overlaying="y", side="right", showgrid=False
#     ),
#     legend=dict(
#         orientation="h",  # Horizontal orientation
#         yanchor="top",  # Anchor at the top of the legend box
#         y=-0.2,  # Position it below the plot (adjust as needed)
#         xanchor="center",  # Center align the legend
#         x=0.5,  # Place at the center of the plot horizontally
#     ),
#     legend_title="Country",
# )
# include: False


```