---
title: "Gapminder | Child Mortality & Fertility Rate"  
author: "James Matosse"
format: 
    dashboard:
        theme: yeti
        echo: false
#        include: true
        fig.align: center
        layout:
            fill: true
---

```{python}
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from itables import show
import country_converter as coco
from IPython.display import Markdown

# Load the data
child_mortality = pd.read_csv(
    "data/child_mortality_0_5_year_olds_dying_per_1000_born.csv"
)
fertility_wide = pd.read_csv("data/children_per_woman_total_fertility.csv")
employ_wide = pd.read_csv("data/females_aged_15plus_employment_rate_percent.csv")

# Subset the data to include `country`, `1999`, and `2019` columns only.
table_df = child_mortality[["country", "1999", "2019"]]
table_df = table_df.rename(columns={"country": "Country/area"})

# Calculate absolute change as the difference between 2019 and 1999
table_df["Absolute Change"] = table_df["2019"] - table_df["1999"]

# Calculate relative change as the absolute change divided by the 2000 emissions, then multiplied by 100
table_df["Relative Change"] = (
    (table_df["2019"] - table_df["1999"]) / table_df["1999"]
) * 100

# Round to 0 decimal places, and add a % sign to the relative change
table_df["Relative Change"] = table_df["Relative Change"].round(0).astype(str) + "%"

# Data cleaning
child_mortality_long = child_mortality.melt(
    id_vars="country", var_name="year", value_name="mortality"
)
child_mortality_long["country"] = child_mortality_long["country"].replace(
    {"UAE": "United Arab Emirates"}
)

# Convert 'country' to a 'country code' and add it as a new variable
child_mortality_long["country_code"] = coco.convert(
    child_mortality_long["country"], to="ISO3"
)

child_mortality_long["year"] = child_mortality_long["year"].astype(int)

child_subset = child_mortality_long.query("year >= 1991 and year <= 2019")

# Creates continent variable to the assigned country
child_subset["continent"] = child_subset["country"].apply(
    lambda x: coco.convert(names=x, to="continent")
)

fertility_long = fertility_wide.melt(
    id_vars="country", var_name="year", value_name="woman_fertility"
)

fertility_long["country"] = fertility_long["country"].replace(
    {"UAE": "United Arab Emirates"}
)

fertility_long["country_code"] = coco.convert(fertility_long["country"], to="ISO3")

fertility_long["year"] = fertility_long["year"].astype(int)

fertility_sub = fertility_long.query("year >= 1991 and year <= 2019")
# Merged datasets
child_fertility = pd.merge(
    child_subset,
    fertility_sub,
    on=["country_code", "year"],
    how="left",
)

child_fertility = child_fertility.drop(columns="country_y").rename(
    columns={"country_x": "country"}
)

col_list = list(child_fertility.columns)

col_list.insert(
    1, col_list.pop(3)
)  # Pop the 4th column (index 3) and insert at the 2nd
# col_list
col_list.insert(
    2, col_list.pop(4)
)  # Pop the 5th column (index 4) and insert at the 3rd
child_fertility = child_fertility[col_list]

employ_long = employ_wide.melt(
    id_vars="country", var_name="year", value_name="employment_rate"
)

employ_long["country"] = employ_long["country"].replace({"UAE": "United Arab Emirates"})
# Replace "Channel Islands" with "United Kingdom"
employ_long["country"] = employ_long["country"].replace(
    "Channel Islands", "United Kingdom"
)

employ_long["country_code"] = coco.convert(employ_long["country"], to="ISO3")

employ_long["year"] = employ_long["year"].astype(int)

employ_child_fert = pd.merge(
    child_fertility,
    employ_long,
    on=["country_code", "year"],
    how="left",
)
employ_child_fert = employ_child_fert.drop(columns="country_y").rename(
    columns={"country_x": "country"}
)

```


```{python}

employ_child_fert = employ_child_fert.dropna()  # Remove rows with NaN values

# Define a color mapping for consistency
continent_color = {
    "Asia": "red",
    "Africa": "blue",
    "Oceania": "green",
    "America": "orange",
    "Europe": "purple",
}

color_map = {
    "China": "red",
    "Egypt": "blue",
    "Australia": "green",
    "Argentina": "orange",
    "Germany": "purple",
}

employ_child_fert["mortality_pct"] = employ_child_fert["mortality"] / 10


highest_mortality = child_subset.loc[
    child_subset.groupby("continent")["mortality"].idxmax()
].sort_values(["mortality"], ascending=False)

lowest_mortality = child_subset.loc[
    child_subset.groupby("continent")["mortality"].idxmin()
].sort_values(["mortality"], ascending=True)

fig_fe = px.scatter(
    employ_child_fert,
    y="mortality_pct",
    x="woman_fertility",
    animation_frame="year",
    color="continent",
    title="The Woman's fertility vs. Child Mortality",
    size="employment_rate",
    color_discrete_map=continent_color,
    labels={
        "country": "Country",
        "woman_fertility": "Woman's Fertility",
        "year": "Year",
        "mortality_pct": "Child Mortality (%)",
        "continent": "Continent",
        "employment_rate": "Employment Rate"
    },
).update_layout(
    showlegend=False,
    xaxis_title="Total Fertility Rate",
    yaxis_title="Child Mortality (%)",
)

fig = px.bar(
    lowest_mortality,
    y="continent",
    x="mortality",
    color="country",
    title="Lowest Child Mortality per Continent in 2019",
    labels={
        "mortality": "Child Mortality",
        "continent": "Continent",
        "country": "Country",
    },
    #    color_discrete_map=continent_color,
).update_layout(showlegend=False)


# Create the map using plotly express with a red color scale
map_fig = px.choropleth(
    child_subset,
    locations="country_code",
    color="mortality",
    hover_name="country",
    animation_frame="year",
    title="Map of Countries by Child Mortality",
    labels={
        "country_code": "Country Code",
        "mortality": "Child Mortality",
        "year": "Year",
    },
    color_continuous_scale="Reds",
).update_layout(coloraxis_showscale=True)


fig_fert = px.line(
    child_fertility.query(
        'country == ["China", "Egypt", "Australia", "Argentina", "Germany"]'
    ),
    x="year",
    y="woman_fertility",
    color="country",
    title="The Woman's fertility from 1991 to 2019",
    markers=True,
    color_discrete_map=color_map,
    labels={
        "country": "Country",
        "woman_fertility": "Woman's Fertility",
        "year": "Year",
#        "mortality": "Child Mortality",
    },
).update_layout(
    showlegend=False, xaxis_title="Year", yaxis_title="Total Fertility Rate"
)

highest_fertility = child_fertility.loc[
    child_fertility.groupby("continent")["woman_fertility"].idxmax()
].sort_values(["woman_fertility"], ascending=False)

lowest_fertility = child_fertility.loc[
    child_fertility.groupby("continent")["woman_fertility"].idxmin()
].sort_values(["woman_fertility"], ascending=True)

filter_year = employ_child_fert.query("year == 2019")
highest_employ = (
    filter_year.loc[filter_year.groupby("continent")["employment_rate"].idxmax()]
    .dropna()  # Remove rows with NaN values
    .sort_values(["employment_rate"], ascending=False)
)

lowest_employ = employ_child_fert.loc[
    employ_child_fert.groupby("continent")["employment_rate"].idxmin()
].sort_values(["employment_rate"], ascending=True)

# Create the map using plotly express with a green color scale
map_fig2 = px.choropleth(
    employ_child_fert,
    locations="country_code",
    color="employment_rate",
    hover_name="country",
    animation_frame="year",
    title="Map of Countries for Female Employment Rate",
    labels={
        "country_code": "Country Code",
        "employment_rate": "Employment Rate",
        "year": "Year",
    },
    color_continuous_scale="Greens",
).update_layout(coloraxis_showscale=True)
# include: False

avg_fert_cont = (
    employ_child_fert.groupby("continent")
    .agg(mean_fertility=("woman_fertility", "mean"))
    .reset_index()
    .sort_values(by="mean_fertility", ascending=False)
)

fig_fert1 = px.pie(
    avg_fert_cont,
    names="continent",
    values="mean_fertility",
    color="continent",
    title="Average Woman's Fertility per Continent",
    labels={"mean_fertility": "Average Fertility", "continent": "Continent"},
    hover_data=["mean_fertility"],
    color_discrete_map=continent_color,
).update_traces(
    textinfo="label+percent", showlegend=False  # Show label and percent
)

def assign_employ_group(employ_rate):
    if employ_rate >= 3 and employ_rate < 36:
        return "3-35"
    elif employ_rate >= 36 and employ_rate < 47:
        return '36-46'
    elif employ_rate >= 47 and employ_rate < 58:
        return "47-58"
    elif employ_rate >= 58:
        return '58-90'
    else:
        return 'Invalid'

#assign_employ_group(20)
assign_employ_groupVec = np.vectorize(assign_employ_group)

employ_child_fert["employ_group"] = assign_employ_groupVec(employ_child_fert["employment_rate"])


# Use pd.cut() to group

# Creating bin employment_rate into 4 intervals
# nbins = [3, 37, 46, 57, 90]
# employ_child_fert["employ_group"] = pd.cut(employ_child_fert["employment_rate"], nbins)


# Tabulate age groups
#employ_child_fert["employ_group"].value_counts(normalize=True)

# Create summary table for employ groups
employ_mortality_table = (
    employ_child_fert.groupby("employ_group")
    .agg(mean_mortality_employ=("mortality_pct", "mean"), num_inds=("mortality_pct", "size"))
    .reset_index()
)


figl = px.bar(
    employ_mortality_table,
    x="employ_group",
    y="mean_mortality_employ",
    title="Average Child Mortality per Grouped Employment Rate",
    labels={
        "mean_mortality_employ": "Child Mortality",
        "employ_group": "Employment Rate Group",
    },
    #    color_discrete_map=continent_color,
).update_layout(showlegend=False,
 xaxis_title="Female Employment Rate Group (%)", yaxis_title="Child Mortality (%)")

# Compute highest employment rate
highestE_row = (
    employ_child_fert.sort_values("employment_rate", ascending=False).head(1).squeeze()
)
highest_employ_rat_country = highestE_row["country"]
highest_employ_rat_value = round(highestE_row["employment_rate"], 2)
highest_employ_rat_year = highestE_row["year"]

# Compute lowest child mortality
lowest_row = (
    employ_child_fert.sort_values("mortality", ascending=True).head(1).squeeze()
)
lowest_mortality_country = lowest_row["country"]
lowest_mortality_value = round(lowest_row["mortality"], 1)
lowest_mortality_year = lowest_row["year"]

# Compute highest fertility rate
highestF_row = (
    employ_child_fert.sort_values("woman_fertility", ascending=False).head(1).squeeze()
)
highest_fertility_country = highestF_row["country"]
highest_fertility_value = round(highestF_row["employment_rate"], 2)
highest_fertility_year = highestF_row["year"]


lowest20 = (
    employ_child_fert[employ_child_fert["year"] == 2019]
    .sort_values("woman_fertility", ascending=True)
    .head(20)
)
```


# HOME

## Row 1 {height=35%}

::: {.valuebox icon="heart" color="#1E90FF" title="Lowest Child Mortality"}

`{python} str(lowest_mortality_value)`

`{python} lowest_mortality_country` in `{python} str(lowest_mortality_year)`

:::

::: {.valuebox icon="flower3" color="#87CEFA" title="Highest Total Fertility Rate"} 

`{python} str(highest_fertility_value)`

`{python} highest_fertility_country` in `{python} str(highest_fertility_year)`

:::

::: {.valuebox icon="mortarboard-fill" color="#4682B4" title="Highest Female Employment Rate"}

`{python} str(highest_employ_rat_value)`

`{python} highest_employ_rat_country` in `{python} str(highest_employ_rat_year)`

:::

## Row 2 {height=60%}

### Comumn {width="60%"}

```{python}
fig_fe
```

### Column 

```{python}
figl
```

# Child Mortality 

## Row {height=80%}

### Column {width="60%"}

```{python}
#| title: Child Mortality
#show(table_df, caption="Child Mortality")
Markdown(table_df.to_markdown())
# This table can be filtered alphabetically by country or sorted in ascending/descending order by any other column.
```

### Column {.tabset width="40%"}

#### Map

```{python}
map_fig
```

#### Chart

```{python}
fig
```

## Row {height="20%"}

The chart highlights clear disparities between continents in child mortality rates, with developed regions (Europe, Asia, Oceania) showing significantly lower rates compared to developing regions (America and Africa).

This data underscores the importance of healthcare infrastructure, economic development, and public health initiatives in reducing child mortality rates. Finland having the lowest child mortality rate among all continents, with a value close to 1. This suggests excellent healthcare systems and child welfare practices in the country. In contrast, Libya has the highest child mortality rate among the listed continents, with a value significantly higher than the rest. This reflects disparities in healthcare access, infrastructure, and socioeconomic conditions in the African region.

# Woman's Fertility {orientation="columns"}

## Column 1 {width="60%"}

### Row {.tabset height=80%}

#### Pie

```{python}
fig_fert1
```

#### line

```{python}
fig_fert
```

### Row

There is a clear divide between continents with higher fertility rates (Africa and Oceania) and those with lower rates (Europe, America, and parts of Asia). The data reflects varying levels of development, healthcare access, education, and cultural norms influencing fertility rates worldwide.

## Column 2 

```{python}

# Create the bar plot
fig_fert2 = px.bar(
    lowest20,
    y='country',
    x='woman_fertility',
    color='continent',  # Use continent for coloring
    hover_name='continent',
    title='Lowest Total Fertility Rate in 2019',
    labels={'continent': 'Continent', 'woman_fertility': "Woman's Fertility", 'country': 'Country'},
    color_discrete_map=continent_color  # Apply the predefined color mapping
).update_layout(
    showlegend=False,
    xaxis_title="Total Fertility Rate",
    yaxis_title="Country"
    )

fig_fert2
```

# Female Employment Rate

## Row 1 {height=50%}

```{python}
continent_fig = px.violin(
    employ_child_fert,
    x="continent",
    y="employment_rate",
    color="continent",
    animation_frame="year",  # Add animation for the year
    labels={'continent': 'Continent', 'employment_rate': 'Employment Rate', 'year': 'Year', 'country': 'Country'},
    title="Distribution of Female Employment Rate by Continent (1991-2019)",
    points="all",  # This shows all data points
    hover_data=["country"],  # This adds country names to hover info
    color_discrete_map=continent_color,
    box=True,
).update_layout(
    showlegend=False,
    xaxis_title="Continent",
    yaxis_title="Employment Rate",
    sliders=[
        {
            "active": employ_child_fert["year"]
            .unique()
            .tolist()
            .index(2018),  # Set slider to 2018 index
        }
    ],
)

# Ensure the animation starts at 2018 by setting the default frame
continent_fig.frames = [
    frame for frame in continent_fig.frames if frame.name == "2018"
] + [
    frame for frame in continent_fig.frames if frame.name != "2018"
]

continent_fig
```

## Row 2 {height=50%}

### Column {width="60%"}

```{python}
map_fig2
```


### Column {width="40%"}

**For 2018** Africa and Oceania have relatively high upper bounds for female employment rates compared to other continents. In contrast, Asia has the lowest minimum values, indicating that some countries have significantly low participation rates.

Africa exhibits the widest range of female employment rates, reflecting significant variability between countries on this continent. However, it also has the highest median, suggesting that most countries in Africa have a relatively high rate of female employment compared to other continents.

Asia also shows a broad range, with some countries having very low employment rates and others quite high. On the other hand, Europe, America, and Oceania demonstrate relatively smaller ranges, indicating more consistency within these continents. Furthermore, Europe and America have lower medians compared to Africa and Oceania, reflecting a slightly lower overall female employment rate.

# Data Download

```{python}
# | title: Child mortality, total fertility and employment rate Dataset (1991 to 2019)

employ_child_fert = employ_child_fert.rename(
    columns={
        "country": "Country/area",
        "country_code": "Country Code",
        "continent": "Continent",
        "year": "Year",
        "mortality": "Child Mortality",
        "woman_fertility": "Fertility Rate",
        "employment_rate": "Employment Rate",
    }
)
employ_child_fert = employ_child_fert.drop(columns='mortality_pct')
# Display full dataset with itables
show(
    employ_child_fert,
    buttons=["csvHtml5"],
)
```

# About

The data used for this PBB's capstone project was obtained from [Gapminder's data repository](https://gapminder.org/data). Three indicators were selected for analysis namely; "child mortality", "total fertilty rate", and "female employment rate".

Total fertility rate is the number of children that would be born to a woman if she were to live to the end of her childbearing years and bear children in accordance with age-specific fertility rates of the specified year.
Child mortality is for 0 to 5 year olds dying per 1000 born.
Female employment rate the percentage of female population, age group 15+, that has been employed during the given year.

Gapminder is an independent Swedish foundation with no political, religious or economic affiliations. Gapminder fights devastating misconceptions and promotes a fact-based worldview everyone can understand.

**Watch Hans Rosling on Child Mortality in Developing Countries:**

<iframe width="560" height="315" src="https://youtube.com/embed/OwII-dwh-bk?si=iVzuHDVHmiGmM_6b" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>